<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigHandling.Net</name>
    </assembly>
    <members>
        <member name="T:DaanV2.Config.BaseConfig`1">
            <summary>A class that handles the config property and making sure it sets the value</summary>
        </member>
        <member name="M:DaanV2.Config.BaseConfig`1.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.BaseConfig`1"/></summary>
        </member>
        <member name="P:DaanV2.Config.BaseConfig`1.Config">
            <summary>Gets or sets the config object</summary>
        </member>
        <member name="F:DaanV2.Config.BaseConfig`1._Config">
            <summary>The field for the config object behind the property</summary>
        </member>
        <member name="T:DaanV2.Config.ConfigAttribute">
            <summary>The attribute responsible for giving the system its information</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigAttribute.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.ConfigAttribute"/></summary>
        </member>
        <member name="M:DaanV2.Config.ConfigAttribute.#ctor(System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.ConfigAttribute"/></summary>
            <param name="Name">The name of this config object</param>
        </member>
        <member name="M:DaanV2.Config.ConfigAttribute.#ctor(System.String,System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.ConfigAttribute"/></summary>
            <param name="Name">The name of this config object</param>
            <param name="Category">The catergory this config objects fall under, use \ for sub categories,
            if no subfolder is given, then the category is copied to subfolder</param>
            <example>[ConfigAttribute("Example", "DaanV2\\General")]</example>
        </member>
        <member name="M:DaanV2.Config.ConfigAttribute.#ctor(System.String,System.String,System.String)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.ConfigAttribute"/></summary>
            <param name="Name">The name of this config object</param>
            <param name="Category">The catergory this config objects fall under, use \ for sub categories</param>
            <param name="SubFolder">The subfolder the config loader needs to save/load from. 
            relative fromt the config folder, use \ to create even deeper folder structures</param>
        </member>
        <member name="P:DaanV2.Config.ConfigAttribute.Name">
            <summary>Gets or sets the name of this object</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigAttribute.Category">
            <summary>Gets or sets the category of this object</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigAttribute.SubFolder">
            <summary>Gets or sets the subfolder for this config</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigAttribute._Name">
            <summary>Gets or sets the name of this object</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigAttribute._Category">
            <summary>Gets or sets the category of this object</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigAttribute._SubFolder">
            <summary>Gets or sets the subfolder for this config</summary>
        </member>
        <member name="T:DaanV2.Config.INewConfig">
            <summary>The interface responsible for setting default values when the config file is missing</summary>
        </member>
        <member name="M:DaanV2.Config.INewConfig.SetNewInformation">
            <summary>Fills this object with the given default values for the config save file</summary>
        </member>
        <member name="T:DaanV2.Config.Serialization.JSONSerializer`1">
            <summary>The class responsible for forming the contract between the interface and the json serializer</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serializes the given object into the given stream</summary>
            <param name="O">The given object to serialize</param>
            <param name="Writer">The given stream to write in</param>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializer`1.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.Serialization.JSONSerializer`1"/></summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializer`1.#ctor(System.Type)">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.Serialization.JSONSerializer`1"/></summary>
            <param name="ForceType">Force the serializer to use this type instead of its generic type</param>
        </member>
        <member name="F:DaanV2.Config.Serialization.JSONSerializer`1._ForType">
            <summary>Gets or sets the type used to serialize</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes the given stream into the specified object</summary>
            <param name="Reader">The stream to reader from</param>
            <returns>Deserializes the given stream into the specified object</returns>
        </member>
        <member name="T:DaanV2.Config.Serialization.XmlSerializerFactory">
            <summary>The class that is reponsible for creating serializers/deserializers</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializerFactory.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.Serialization.XmlSerializerFactory"/></summary>
        </member>
        <member name="F:DaanV2.Config.Serialization.XmlSerializerFactory._Name">
            <summary>The name used for identifying this factory</summary>
        </member>
        <member name="P:DaanV2.Config.Serialization.XmlSerializerFactory.Name">
            <summary>The name used for identifying this factory</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializerFactory.GetDeserializer``1">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <typeparam name="TOut">The object type to deserialize</typeparam>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializerFactory.GetDeserializer(System.Type)">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializerFactory.GetSerializer``1">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <typeparam name="TIn">The object type to serialize</typeparam>
            <returns>Returns a serializer that is capable of serializing the given object type/></returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializerFactory.GetSerializer(System.Type)">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of serializing the given object type/></returns>
        </member>
        <member name="T:DaanV2.Config.Serialization.XmlSerializer`1">
            <summary>The class that is responisble binding the .net xml serializer to the interface</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serializes the given object into the given stream</summary>
            <param name="O">The object to serialize</param>
            <param name="Writer">The stream to write to</param>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializer`1.#ctor">
            <summary>Creates a new instance of <see cref="T:System.Xml.Serialization.XmlSerializer"/></summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializer`1.#ctor(System.Type)">
            <summary>Creates a new instance of <see cref="T:System.Xml.Serialization.XmlSerializer"/></summary>
            <param name="ForceType">The type the serializer has to serialize</param>
        </member>
        <member name="M:DaanV2.Config.Serialization.XmlSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes the given stream into the specified object type</summary>
            <param name="Reader">The stream to read from</param>
            <returns>Deserializes the given stream into the specified object type</returns>
        </member>
        <member name="T:DaanV2.Config.Serialization.IConfigDeserializer`1">
            <summary>The interface responsible for defining how a serializer should behave</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigDeserializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes the given stream into the specified object</summary>
            <param name="Reader">The stream to deserialize</param>
            <returns>Deserializes the given stream into the specified object</returns>
        </member>
        <member name="T:DaanV2.Config.Serialization.IConfigSerializer`1">
            <summary>The interface responsible for telling how serializers should behave</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigSerializer`1.Serialize(`0,System.IO.Stream)">
            <summary>Serializes the given object into the specified stream</summary>
            <param name="O">The object to serialize</param>
            <param name="Writer">The stream to write to</param>
        </member>
        <member name="T:DaanV2.Config.Serialization.IConfigSerializerFactory">
            <summary>A interface that is responisble for dictating how a serializing factory should behave</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigSerializerFactory.GetDeserializer``1">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <typeparam name="TOut">The object type to deserialize</typeparam>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigSerializerFactory.GetDeserializer(System.Type)">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigSerializerFactory.GetSerializer``1">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <typeparam name="TIn">The object type to serialize</typeparam>
            <returns>Returns a serializer that is capable of serializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.IConfigSerializerFactory.GetSerializer(System.Type)">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of serializing the given object type</returns>
        </member>
        <member name="P:DaanV2.Config.Serialization.IConfigSerializerFactory.Name">
            <summary>Gets the name used for identifying this factory</summary>
        </member>
        <member name="T:DaanV2.Config.Serialization.JSONSerializerFactory">
            <summary>The factory responsible for providing serializer/deserializer for the given object</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializerFactory.#ctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.Serialization.JSONSerializerFactory"/></summary>
        </member>
        <member name="F:DaanV2.Config.Serialization.JSONSerializerFactory._Name">
            <summary>The name of this Json serializing factory</summary>
        </member>
        <member name="P:DaanV2.Config.Serialization.JSONSerializerFactory.Name">
            <summary>Gets the name of this Json serializing factory</summary>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializerFactory.GetDeserializer``1">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <typeparam name="TOut">The object type to deserialize</typeparam>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializerFactory.GetDeserializer(System.Type)">
            <summary>Returns a serializer that is capable of deserializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of deserializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializerFactory.GetSerializer``1">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <typeparam name="TIn">The object type to serialize</typeparam>
            <returns>Returns a serializer that is capable of serializing the given object type</returns>
        </member>
        <member name="M:DaanV2.Config.Serialization.JSONSerializerFactory.GetSerializer(System.Type)">
            <summary>Returns a serializer that is capable of serializing the given object type</summary>
            <param name="ForType">The object type to serialize</param>
            <returns>Returns a serializer that is capable of serializing the given object type</returns>
        </member>
        <member name="T:DaanV2.Config.ConfigLoader">
            <summary>The static class responsible for serializing/deserializing object into the files</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.#cctor">
            <summary>Initializes the instance of <see cref="T:DaanV2.Config.ConfigLoader"/></summary>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.AddFactories(System.Reflection.Assembly)">
            <summary>Reflects upong the given assemblies to load in specified factories to load into memory</summary>
            <param name="assembly">The assembly to reflect upon</param>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.AddFactory(DaanV2.Config.Serialization.IConfigSerializerFactory)">
            <summary>Adds the given factory to the internal list</summary>
            <param name="Factory">The factory to add, cannot be null</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.SwitchFactory">
            <summary>Switches the current serializing factory to the specified factory in config options</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.GetLock(System.String)">
            <summary>Returns a lock that is assigned to the specified filepath</summary>
            <param name="Filepath">The filepath to return a lock for</param>
            <returns>Returns a lock that is assigned to the specified filepath</returns>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.Preload">
            <summary>Preloads and intializes this class factories</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigLoader._Locks">
            <summary>The locks used for to make sure config files can only be accesed by 1 thread at a time</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigLoader._SerializerFactory">
            <summary>The current serializing factory that is being used</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigLoader._Factories">
            <summary>The internal dictionary of factories</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.LoadConfig(System.Type,System.String)">
            <summary>Loads the specified object from file storage or creates a new instance</summary>
            <param name="T">The type of the object to retrieve</param>
            <param name="Filename">the name of the config</param>
            <returns>A <see cref="T:System.Object"/> is returned</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.Runtime.InteropServices.COMException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.MethodAccessException" />
            <exception cref="T:System.MemberAccessException" />
            <exception cref="T:System.MissingMethodException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.Reflection.TargetInvocationException" />
            <exception cref="T:System.TypeLoadException" />
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.LoadConfig``1(System.String)">
            <summary>Loads the given config into an object from the xml file in the config folder</summary>
            <typeparam name="T">The object type to be returned and loaded</typeparam>
            <param name="Filename">The name of the config</param>
            <returns>Loads the given config into an object from the xml file in the config folder</returns>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.Runtime.InteropServices.COMException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.MethodAccessException" />
            <exception cref="T:System.MemberAccessException" />
            <exception cref="T:System.MissingMethodException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.Reflection.TargetInvocationException" />
            <exception cref="T:System.TypeLoadException" />
        </member>
        <member name="M:DaanV2.Config.ConfigLoader.SaveConfig(System.Object,System.String)">
            <summary>Save the given object into a file</summary>
            <param name="ConfigObject">The object to save</param>
            <param name="Filename">The filename the objects should get</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.UnauthorizedAccessException" />
            <exception cref="T:System.Security.SecurityException" />
        </member>
        <member name="T:DaanV2.Config.ConfigMapper">
            <summary>The class responsible for presistanting config objects as well as the loading and saving.</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Remove(System.Type)">
            <summary>Remove the config from the internal list</summary>
            <param name="T">DOLATER FILL IN</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Remove(System.Object)">
            <summary>Remove the config from the internal list</summary>
            <param name="T">DOLATER FILL IN</param>
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Clear(System.Boolean)">
            <summary>Clears the complete internal list</summary>
            <param name="SaveConfigs">DOLATER FILL IN</param>
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.GetName(System.Type)">
            <summary>Returns the name of the given object needed for the process. also checks if the object has the needed attributes</summary>
            <param name="T">The type to retrieve the name of</param>
            <returns>Returns a <see cref="T:System.String"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.TypeLoadException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Set(System.Type,System.Object)">
            <summary>Sets the given config under the given key</summary>
            <param name="Key">The key to set the config under, use the configs own type! but this function allows to bypass that</param>
            <param name="ConfigObject">The config object to set under the given key</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Set(System.Object)">
            <summary>Sets the given config</summary>
            <param name="ConfigObject">DOLATER FILL IN</param>
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Get(System.Type)">
            <summary>Retrieves the config using the given type, either loads it from memory or from the file, if none are succesfull a new instance is created and saved</summary>
            <param name="T">the object type to get</param>
            <returns>Returns a <see cref="T:System.Object"/></returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.Runtime.InteropServices.COMException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.MethodAccessException" />
            <exception cref="T:System.MemberAccessException" />
            <exception cref="T:System.MissingMethodException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.TypeLoadException" />
            <exception cref="T:System.Reflection.TargetInvocationException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Get``1">
            <summary>Retrieves the config using the given type, either loads it from memory or from the file, if none are succesfull a new instance is created and saved</summary>
            <typeparam name="T">The config object to be returned</typeparam>
            <returns>Retrieves the config using the given type, either loads it from memory or from the file, if none are succesfull a new instance is created and saved</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.Runtime.InteropServices.COMException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.MethodAccessException" />
            <exception cref="T:System.MemberAccessException" />
            <exception cref="T:System.MissingMethodException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.TypeLoadException" />
            <exception cref="T:System.Reflection.TargetInvocationException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.#cctor">
            <summary>Creates a new instance of <see cref="T:DaanV2.Config.ConfigMapper"/></summary>
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Preload(System.Boolean)">
            <summary>Pre initializes the values inside of this class</summary>
            <param name="LoadConfigObjects">Marks if it should load the given objects from the loaded assemblies</param>
            <exception cref="T:System.AppDomainUnloadedException" />
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.OverflowException" />
            <exception cref="T:System.TypeLoadException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Preload(System.Reflection.Assembly)">
            <summary>Looks through the given assembly looking for config objects and load them into memory. Creating files if they are not present.</summary>
            <param name="assembly">The assembly to preload</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.OverflowException" />
            <exception cref="T:System.TypeLoadException" />
        </member>
        <member name="P:DaanV2.Config.ConfigMapper.Configs">
            <summary>Gets or sets the dataset of types to configs</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigMapper.Count">
            <summary>Returns the amount of objects currently saved in memory</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Load(System.Type)">
            <summary>Loads a given type from the file</summary>
            <param name="T">DOLATER FILL IN</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.Runtime.InteropServices.COMException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.Runtime.InteropServices.InvalidComObjectException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.MethodAccessException" />
            <exception cref="T:System.MemberAccessException" />
            <exception cref="T:System.MissingMethodException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.TypeLoadException" />
            <exception cref="T:System.Reflection.TargetInvocationException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.Save(System.Type)">
            <summary>Saves the given type into a file</summary>
            <param name="T">DOLATER FILL IN</param>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="M:DaanV2.Config.ConfigMapper.SaveAll">
            <summary>saves all the config in memory to a file</summary>
            <exception cref="T:System.Reflection.AmbiguousMatchException" />
            <exception cref="T:System.ArgumentException" />
            <exception cref="T:System.ArgumentNullException" />
            <exception cref="T:System.ArgumentOutOfRangeException" />
            <exception cref="T:System.IO.DirectoryNotFoundException" />
            <exception cref="T:System.IO.FileNotFoundException" />
            <exception cref="T:System.IO.IOException" />
            <exception cref="T:System.InvalidOperationException" />
            <exception cref="T:System.NotSupportedException" />
            <exception cref="T:System.IO.PathTooLongException" />
            <exception cref="T:System.Security.SecurityException" />
            <exception cref="T:System.UnauthorizedAccessException" />
        </member>
        <member name="F:DaanV2.Config.ConfigMapper._Configs">
            <summary>The dataset of types to configs</summary>
        </member>
        <member name="T:DaanV2.Config.ConfigOptions">
            <summary>The static class that is responsible for handling the options</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigOptions.#cctor">
            <summary>Initializes a new instance of <see cref="T:DaanV2.Config.ConfigOptions"/></summary>
        </member>
        <member name="P:DaanV2.Config.ConfigOptions.FilepathOptions">
            <summary>The path where values of this class are saved</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigOptions.ConfigFolder">
            <summary>The folder where the configs are stored or loaded from</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigOptions.ConfigExtension">
            <summary>The extension the config files will receive</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigOptions.ConfigSerializerName">
            <summary>The name of the serializing factory</summary>
        </member>
        <member name="P:DaanV2.Config.ConfigOptions.LockCount">
            <summary>The amount of locks used by the config loader</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigOptions.Preload">
            <summary>Preloads this class and its values.</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigOptions.Save">
            <summary>Save this class into the config.ini file</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigOptions.Load">
            <summary>Loads the config.ini file</summary>
        </member>
        <member name="M:DaanV2.Config.ConfigOptions.HasFile">
            <summary>checks if the config.ini file exists</summary>
            <returns>Returns a <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="F:DaanV2.Config.ConfigOptions._FilepathOptions">
            <summary>The path where values of this class are saved</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigOptions._ConfigFolder">
            <summary>The folder where the configs are stored or loaded from</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigOptions._ConfigExtension">
            <summary>The extension the config files will receive</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigOptions._ConfigSerializerName">
            <summary>The name of the serializing factory</summary>
        </member>
        <member name="F:DaanV2.Config.ConfigOptions._LockCount">
            <summary>The amount of locks used</summary>
        </member>
    </members>
</doc>
